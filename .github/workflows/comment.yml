name: slashDeploy
on:
  repository_dispatch:
    types: [deploy-command]
jobs:
  slashDeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Dump the client payload context
        env:
          PAYLOAD_CONTEXT: ${{ toJson(github.event.client_payload) }}
        run: echo "$PAYLOAD_CONTEXT"
      - name: Check release exists
        id: checkRelease
        uses: actions/github-script@0.4.0
        env:
          RELEASE_VERSION: ${{ github.event.client_payload.github.payload.issue.title }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          debug: true
          # result-encoding: string
          script: |
            const tag = '${{ github.event.client_payload.github.payload.issue.title }}'
            const error = 'No release for ${tag}';
            const [owner, repo] = '${{github.repository}}'.split('/');
            const releaseAssetName = `${repo}-${tag}.zip`; 
            try {
              const {data: release} = await github.repos.getReleaseByTag({
                owner,
                repo,
                tag,
              });

              if (!release.prerelease || release.draft) {
                throw new Error(error);
              }
              const releaseAsset = release.assets.filter(asset => asset.name = releaseAssetName)
              switch (true) {
                  case releaseAsset.length === 0:
                      throw new Error("No release assets found");
                      break;
                  case releaseAsset.length > 1:
                      throw new Error("Multiple release assets found")
                      break;
              }
            return releaseAsset[0].browser_download_url;
            } catch (err) {
              throw new Error(err);
            }

      - name: Add Comment to Issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray
          body: |
            **Deploying release:** ${{ github.event.client_payload.github.payload.issue.title }}
      - name: Dump output from checkRelease
        run: echo ${{steps.checkRelease.outputs.result}}
      - name: Get Release Asset
        run: |
          curl -L -u username:${{secrets.GITHUB_TOKEN}} -o app.zip ${{ steps.checkRelease.outputs.result }}
          ls -ltr
          unzip ./app.zip
      - name: Deploy to non-live
        run: echo "Deploy to non-live slot here"
